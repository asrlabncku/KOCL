/* This work is licensed under the terms of the GNU GPL, version 2.  See
 * the GPL-COPYING file in the top-level directory.
 *
 * Copyright (c) 2010-2011 University of Utah and the Flux Group.
 * All rights reserved.
 */

#include <linux/module.h>
#include <linux/init.h>
#include <linux/types.h>
#include <linux/kernel.h>
#include <linux/list.h>
#include <linux/spinlock.h>
#include <linux/gfp.h>
#include <linux/kthread.h>
#include <linux/proc_fs.h>
#include <linux/mm.h>
#include <linux/mm_types.h>
#include <linux/string.h>
#include <linux/uaccess.h>
#include <asm/page.h>
#include <linux/timex.h>

#include "../../kgpu/kgpu.h"

/* customized log function */
#define g_log(level, ...) kgpu_do_log(level, "callgpu", ##__VA_ARGS__)
#define dbg(...) g_log(KGPU_LOG_DEBUG, ##__VA_ARGS__)

int mycb(struct kgpu_request *req)
{
     g_log(KGPU_LOG_PRINT, "REQ ID: %d, RESP CODE: %d\n",
	   req->id, req->errcode);    
    return 0;

}

static int __init minit(void)
{
    struct kgpu_request* req;
    struct timeval t0, t1;
    long tt;
    int i,k,j;
    char *in;
    unsigned int *out;	
    
    g_log(KGPU_LOG_PRINT, "loaded\n");
   
   int kb=16384;
   
for(j=0;j<2;j++)  {

    printk("  \n");
    printk("KB:    %d \n",kb);

    for(i=0;i<100;i++){

             req = kgpu_alloc_request();
                 if (!req) {
	                g_log(KGPU_LOG_ERROR, "request null\n");
	                return 0;
                 }     
    
            in = kgpu_vmalloc(1024*kb);
  
            for(k=0;k<1024*kb;k++){
	                in[k] = k ;
                }
       
            out = kgpu_vmalloc(sizeof(unsigned int)* kb);
 
            /* for(k=0;k<10;k++)
            {
                 out[k]=0;
                    printk("%d out= %d \n",k,out[k]);
            }  */

            req->in = in;
            if (!req->in) {
	            g_log(KGPU_LOG_ERROR, "callgpu out of memory\n");
	            kgpu_free_request(req);
	            return 0;
            }
    
            req->insize = 1024*kb;
            req->out = out;
            req->outsize = kb*sizeof(unsigned int);
            strcpy(req->service_name, "empty_service");
            req->callback = mycb;

            do_gettimeofday(&t0);
            kgpu_call_sync(req);
            do_gettimeofday(&t1);

            tt = 1000000*(t1.tv_sec-t0.tv_sec)+((long)(t1.tv_usec) - (long)(t0.tv_usec));
    
            printk("Time:%6lu \n",tt);

        /*  for(k=0;k<10;k++)
            {
            printk("%d out= %d \n",k,out[k]);
            } */
    
            kgpu_vfree(req->out);
            kgpu_vfree(req->in);
            kgpu_free_request(req);    
        } 
    // kb=kb*4;
   }
   
   return 0;
}

static void __exit mexit(void)
{
    g_log(KGPU_LOG_PRINT, "unload\n");
}

module_init(minit);
module_exit(mexit);

MODULE_LICENSE("GPL");
