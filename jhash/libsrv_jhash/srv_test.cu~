/* This work is licensed under the terms of the GNU GPL, version 2.  See
 * the GPL-COPYING file in the top-level directory.
 *
 * Copyright (c) 2010-2011 University of Utah and the Flux Group.
 * All rights reserved.
 */
 
#include <stdio.h>
#include <stdlib.h>
#include <cuda.h>
#include "../../../kgpu/kgpu.h"
#include "../../../kgpu/gputils.h"


/* __jhash_mix -- mix 3 32-bit values reversibly. */
#define __jhash_mix(a, b, c)                    \
{                                               \
        a -= c;  a ^= rol32(c, 4);  c += b;     \
        b -= a;  b ^= rol32(a, 6);  a += c;     \
        c -= b;  c ^= rol32(b, 8);  b += a;     \
        a -= c;  a ^= rol32(c, 16); c += b;     \
        b -= a;  b ^= rol32(a, 19); a += c;     \
        c -= b;  c ^= rol32(b, 4);  b += a;     \
}

/* __jhash_final - final mixing of 3 32-bit values (a,b,c) into c */
#define __jhash_final(a, b, c)                  \
{                                               \
        c ^= b; c -= rol32(b, 14);              \
        a ^= c; a -= rol32(c, 11);              \
        b ^= a; b -= rol32(a, 25);              \
        c ^= b; c -= rol32(b, 16);              \
        a ^= c; a -= rol32(c, 4);               \
        b ^= a; b -= rol32(a, 14);              \
        c ^= b; c -= rol32(b, 24);              \
}

/* An arbitrary initial parameter */
#define JHASH_INITVAL           0xdeadbeef
__device__ static inline unsigned int rol32(unsigned int word, unsigned int shift)
{
        return (word << shift) | (word >> (32 - shift));
}



__global__ void empty_kernel(char *k ,unsigned int *out)
{
	int tid = threadIdx.x+blockDim.x*blockIdx.x;
/*
	unsigned int mid,head=0,tail=insize-1;
	
	while(head < tail)
	{
		mid = (head + tail)/2;
		if(in[mid]<out[tid])
		{
			head = mid + 1 ;
		}
		else if(in[mid]>out[tid])
		{
			tail = mid - 1 ;
		}
		else
		{
			out[tid] = mid ;
			break;
		}
	}
	out[tid]=tid;
*/
	unsigned int j=0;
	unsigned int a, b, c;
	unsigned int length=1024,initval=17;
        /* Set up the internal state */
        a = b = c = JHASH_INITVAL + (length<<2) + initval;

        /* Handle most of the key */
        while (length > 3) {
                a += k[tid*1024+0+j];
                b += k[tid*1024+1+j];
                c += k[tid*1024+2+j];
                __jhash_mix(a, b, c);
                length -= 3;
                //k = k+3+tid*1024;
		j+=3;
        }
        
        /* Handle the last 3 u32's: all the case statements fall through */
        switch (length) {
        case 3: c += k[tid*1024+2+j];
        case 2: b += k[tid*1024+1+j];
        case 1: a += k[tid*1024+0+j];
                __jhash_final(a, b, c);
        case 0: /* Nothing left to add */
                break;
        }
	out[tid] = c ;
	printf("kernel run out[%d]=%d \n",tid,c);
}

static int empty_cs(struct kgpu_service_request *sr)
{
    sr->block_x = 1;
    sr->grid_x = sr->insize/1024;
    sr->block_y = 1;
    sr->grid_y = 1;
    return 0;
}

static int empty_launch(struct kgpu_service_request *sr)
{
    printf("kernel lanch \n");
    empty_kernel<<<dim3(sr->grid_x, sr->grid_y),
	dim3(sr->block_x, sr->block_y), 0, (cudaStream_t)(sr->stream)>>>((char *)sr->din,(unsigned int *)sr->dout);
    return 0;
}

static int empty_prepare(struct kgpu_service_request *sr)
{
     printf("service prepare \n");
    cudaStream_t s = (cudaStream_t)(sr->stream);
    csc( ah2dcpy( sr->din, sr->hin, sr->insize, s) );
    return 0;
}

static int empty_post(struct kgpu_service_request *sr)
{
    printf("service post \n");
    cudaStream_t s = (cudaStream_t)(sr->stream);
    csc( ad2hcpy( sr->hout, sr->dout, sr->outsize, s) );

    return 0;
}

static struct kgpu_service empty_srv;

extern "C" int init_service(void *lh, int (*reg_srv)(struct kgpu_service*, void*))
{
    printf("[libsrv_test] Info: init test service\n");
    
    sprintf(empty_srv.name, "empty_service");
    empty_srv.sid = 1;
    empty_srv.compute_size = empty_cs;
    empty_srv.launch = empty_launch;
    empty_srv.prepare = empty_prepare;
    empty_srv.post = empty_post;

    return reg_srv(&empty_srv, lh);
}

extern "C" int finit_service(void *lh, int (*unreg_srv)(const char*))
{
    printf("[libsrv_test] Info: finit test service\n");
    return unreg_srv(empty_srv.name);
}
