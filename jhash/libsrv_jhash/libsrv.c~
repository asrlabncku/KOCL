/* This work is licensed under the terms of the GNU GPL, version 2.  See
 * the GPL-COPYING file in the top-level directory.
 *
 * Copyright (c) 2010-2011 University of Utah and the Flux Group.
 * All rights reserved.
 */
 
#include <stdio.h>
#include <stdlib.h>
#include <CL/cl.h>
#include "../../kgpu/kgpu.h"
#include "../../kgpu/gputils.h"

static int empty_cs(struct kgpu_service_request *sr)
{
    sr->global_x = sr->insize/1024 ; //3072*1024    
    sr->local_x = 256 ;     
    sr->global_y = 1;
    sr->local_y = 1;
#if DEBUG
    printf("sr->global_x = %d \n",sr->global_x);
    printf("sr->local_x_x = %d \n",sr->local_x); 
    printf("compute_size ok \n");  
#endif
    return 0;
}

static int empty_launch(struct kgpu_service_request *sr)
{
  
    size_t globalWorkSize[2]={sr->global_x,1};//global work-items
    size_t  workGroupSize[2]={sr->local_x, 1};//work-items per Group
    
    cl_event kernel_event;   
    cl_err(clEnqueueNDRangeKernel( sr->queue, sr->kernel , 2 , NULL , globalWorkSize, workGroupSize , 0 , NULL , &kernel_event));
    clWaitForEvents(1, &kernel_event); 

#if DEBUG
    printf("clEnqueueNDRangeKernel ok \n");   
#endif
    return 0;
}

static int empty_prepare(struct kgpu_service_request *sr)
{
    cl_event write_event;
    cl_err(clEnqueueWriteBuffer( sr->queue , sr->devInBuf , CL_TRUE , 0 , sr->insize , sr->hin , 0 , NULL, &write_event));
    clWaitForEvents(1, &write_event); 
#if DEBUG    
    printf("clEnqueueWriteBuffer ok \n"); 
#endif
    return 0;
}

static int empty_post(struct kgpu_service_request *sr)
{
    cl_event read_event;
    cl_err(clEnqueueReadBuffer( sr->queue , sr->devOutBuf , CL_TRUE , 0 , sr->outsize , sr->hout , 0 , NULL, &read_event));
    clWaitForEvents(1, &read_event); 
#if DEBUG
    printf("clEnqueueReadBuffer ok \n"); 
#endif
    return 0;
}


static struct kgpu_service empty_srv;

int init_service(void *lh, int (*reg_srv)(struct kgpu_service*, void*))
{
    printf("[libsrv_test] Info: init test service\n");
    
    sprintf(empty_srv.name, "empty_service");
    empty_srv.sid = 1;
    empty_srv.compute_size = empty_cs;
    empty_srv.launch = empty_launch;
    empty_srv.prepare = empty_prepare;
    empty_srv.post = empty_post;

    return reg_srv(&empty_srv, lh);
}

int finit_service(void *lh, int (*unreg_srv)(const char*))
{
    printf("[libsrv_test] Info: finit test service\n");
    return unreg_srv(empty_srv.name);
}
